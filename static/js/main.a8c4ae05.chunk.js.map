{"version":3,"sources":["logo.svg","loading.svg","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","App","songsLoaded","useState","tracks","setTracks","useEffect","fetch","method","headers","Authorization","then","response","json","data","res","items","console","log","className","src","logo","alt","map","track","name","loading","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,kPCwF5BC,MAxDH,KACR,IAAIC,GAAc,EADJ,QAEUC,mBAAS,IAFnB,gCAGcA,sBAHd,mBAGPC,EAHO,KAGCC,EAHD,KAoBd,OAhBAC,oBAAU,KACNC,MAAM,uCAAwC,CAC1CC,OAAQ,MACRC,QAAS,CACLC,cAAe,uKAGlBC,KAAKC,GAAYA,EAASC,QAC1BF,KAAMG,IACH,IAAIC,EAAMD,EAAKE,MACfC,QAAQC,IAAIH,GACZV,EAAUU,GACVb,GAAc,KAEvB,IAEGA,EAkBE,yBAAKiB,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,wBAAIH,UAAU,aAAd,+BAEJ,yBAAKA,UAAU,cACX,sCAEMf,GAAUA,EAAOmB,IAAKC,GAAU,+BAAKA,EAAMA,MAAMC,KAAjB,QAG1C,yBAAKN,UAAU,iBA3BnB,yBAAKA,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKC,IAAKM,IAASP,UAAU,WAAWG,IAAI,SAC5C,wBAAIH,UAAU,aAAd,+BAEJ,yBAAKA,UAAU,cACX,2CAIJ,yBAAKA,UAAU,kBCtD/B,MAAMQ,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTvB,KAAK2B,IACJA,EAAaC,cAAgB,KAC3B,MAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,KACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,WAK1B3B,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrB2B,MAAMC,IACL7B,QAAQ6B,MAAM,4CAA6CA,KChEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,qBAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,OAAQ,KAC9B,MAAMpB,EAAK,UAAMkB,qBAAN,sBAEPzB,EAwCV,SAAiCO,GAE/B3B,MAAM2B,GACHvB,KAAKC,IAGkB,MAApBA,EAAS2C,SACuD,IAAhE3C,EAASH,QAAQ+C,IAAI,gBAAgBC,QAAQ,cAG7CtB,UAAUC,cAAcsB,MAAM/C,KAAK2B,IACjCA,EAAaqB,aAAahD,KAAK,KAC7BkB,OAAOC,SAAS8B,aAKpB3B,EAAgBC,KAGnBW,MAAM,KACL5B,QAAQC,IACN,mEA5DA2C,CAAwB3B,GAGxBD,EAAgBC,MChCxB4B,K","file":"static/js/main.a8c4ae05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.79f6b6a0.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.9d4cbf40.svg\";","/*global swal*/\n\n// import React from 'react';\nimport React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport loading from './loading.svg';\nimport './App.css';\nimport Sound from 'react-sound';\nimport Button from './Button';\n\nconst apiToken = 'BQBJ-u852MQIltdT4GFakrOGzytGoJRiTcnEiRy2nsT-oAEMhIwdtxlQ3lIsQUZmWX6h3jXmzQMloIk3v6YkaPp9-d4ZaHZvy1muGDk54vtBuMVj4btJA3FxAAYq9v14YONzzS-b8EN_bzA9O316xiYkPA';\n\n\nfunction shuffleArray(array) {\n    let counter = array.length;\n\n    while (counter > 0) {\n        let index = getRandomNumber(counter);\n        counter--;\n        let temp = array[counter];\n        array[counter] = array[index];\n        array[index] = temp;\n    }\n\n    return array;\n}\n\n/* Return a random number between 0 included and x excluded */\nfunction getRandomNumber(x) {\n    return Math.floor(Math.random() * x);\n}\n\nconst App = () => {\n    let songsLoaded = false;\n    const [text, setText] = useState('');\n    const [tracks, setTracks] = useState();\n    useEffect(() => {\n        fetch('https://api.spotify.com/v1/me/tracks', {\n            method: 'GET',\n            headers: {\n                Authorization: 'Bearer ' + apiToken,\n            },\n        })\n            .then(response => response.json())\n            .then((data) => {\n                let res = data.items;\n                console.log(res);\n                setTracks(res);\n                songsLoaded = true;\n            });\n    }, [])\n\n    if (! songsLoaded) {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={loading} className=\"App-logo\" alt=\"logo\"/>\n                    <h1 className=\"App-title\">Bienvenue sur le Blindtest</h1>\n                </header>\n                <div className=\"App-images\">\n                    <p>\n                        Loading ...\n                    </p>\n                </div>\n                <div className=\"App-buttons\">\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    <h1 className=\"App-title\">Bienvenue sur le Blindtest</h1>\n                </header>\n                <div className=\"App-images\">\n                    <p>\n                        coucou !\n                        { tracks && tracks.map((track) => <p> {track.track.name} </p>) }\n                    </p>\n                </div>\n                <div className=\"App-buttons\">\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}